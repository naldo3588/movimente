/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src;

import bean.AlunoBean;
import bean.CaixaBean;
import bean.ContasPagarBean;
import bean.ParcelasBean;
import dao.CaixaDAO;
import dao.ContasPagarDAO;
import dao.ParcelasDAO;
import factory.ConexaoFactory;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.Limite_digitosNumeros;

/**
 *
 * @author Ronaldo Pedro
 */
public class JDBaixaPagar extends javax.swing.JDialog {
    
    public java.sql.Connection con;
    public java.sql.Statement stmtListar;
    public java.sql.ResultSet rsListar;

    /**
     * Creates new form JDCRUDLancPagar
     */
    public JDBaixaPagar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jRadioButtonAberto.setSelected(true);
        
        jTextFieldID_Fornecedor.setDocument(new Limite_digitosNumeros(5));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFaturas = new javax.swing.JTable();
        jButtonBaixar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldID_Fornecedor = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextFieldInfo_Fornecedor = new javax.swing.JTextField();
        jRadioButtonAberto = new javax.swing.JRadioButton();
        jRadioButtonQuitado = new javax.swing.JRadioButton();
        jRadioButtonTodos = new javax.swing.JRadioButton();
        dataRender1 = new util.DataRender();
        precoRender1 = new util.PrecoRender();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldValorTotal = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Movi Mente - Baixa de Documentos a Pagar");

        jTableFaturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Título", "Parcela", "Fornecedor", "Tipo", "Tipo Pagamento", "Emissão", "Vencimento", "Historico", "Valor", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFaturas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableFaturas);
        if (jTableFaturas.getColumnModel().getColumnCount() > 0) {
            jTableFaturas.getColumnModel().getColumn(0).setMinWidth(60);
            jTableFaturas.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTableFaturas.getColumnModel().getColumn(0).setMaxWidth(60);
            jTableFaturas.getColumnModel().getColumn(1).setMinWidth(60);
            jTableFaturas.getColumnModel().getColumn(1).setPreferredWidth(60);
            jTableFaturas.getColumnModel().getColumn(1).setMaxWidth(60);
            jTableFaturas.getColumnModel().getColumn(3).setMinWidth(50);
            jTableFaturas.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTableFaturas.getColumnModel().getColumn(3).setMaxWidth(50);
            jTableFaturas.getColumnModel().getColumn(5).setMinWidth(80);
            jTableFaturas.getColumnModel().getColumn(5).setPreferredWidth(80);
            jTableFaturas.getColumnModel().getColumn(5).setMaxWidth(80);
            jTableFaturas.getColumnModel().getColumn(5).setCellRenderer(dataRender1);
            jTableFaturas.getColumnModel().getColumn(6).setMinWidth(90);
            jTableFaturas.getColumnModel().getColumn(6).setPreferredWidth(90);
            jTableFaturas.getColumnModel().getColumn(6).setMaxWidth(90);
            jTableFaturas.getColumnModel().getColumn(6).setCellRenderer(dataRender1);
            jTableFaturas.getColumnModel().getColumn(8).setMinWidth(100);
            jTableFaturas.getColumnModel().getColumn(8).setPreferredWidth(100);
            jTableFaturas.getColumnModel().getColumn(8).setMaxWidth(100);
            jTableFaturas.getColumnModel().getColumn(8).setCellRenderer(precoRender1);
            jTableFaturas.getColumnModel().getColumn(9).setMinWidth(80);
            jTableFaturas.getColumnModel().getColumn(9).setPreferredWidth(80);
            jTableFaturas.getColumnModel().getColumn(9).setMaxWidth(80);
        }

        jButtonBaixar.setText("Baixar");
        jButtonBaixar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBaixarActionPerformed(evt);
            }
        });

        jButton3.setText("Sair");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel10.setText("ID Fornecedor");

        jTextFieldID_Fornecedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldID_FornecedorFocusLost(evt);
            }
        });

        jButton1.setText("P");
        jButton1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jButton1FocusLost(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextFieldInfo_Fornecedor.setEnabled(false);

        buttonGroup1.add(jRadioButtonAberto);
        jRadioButtonAberto.setText("Em Aberto");
        jRadioButtonAberto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAbertoActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonQuitado);
        jRadioButtonQuitado.setText("Quitado");
        jRadioButtonQuitado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonQuitadoActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonTodos);
        jRadioButtonTodos.setText("Todos");
        jRadioButtonTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonTodosActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");

        jLabel1.setText("Total");

        jButton4.setText("jButton4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldID_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldInfo_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 248, Short.MAX_VALUE)
                        .addComponent(jRadioButtonAberto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonQuitado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonTodos)
                        .addGap(144, 144, 144)
                        .addComponent(jButtonBuscar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonBaixar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(precoRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jButtonBuscar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jTextFieldID_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jTextFieldInfo_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonAberto)
                            .addComponent(jRadioButtonQuitado)
                            .addComponent(jRadioButtonTodos))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dataRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(precoRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButtonBaixar)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextFieldID_FornecedorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldID_FornecedorFocusLost
        // TODO add your handling code here:
        if (jTextFieldID_Fornecedor.getText().isEmpty()) {
            
        } else {
            
            nome();
            buscarSomenteID_FornecedorID();
            buttonBuscar();
            if (jTextFieldID_Fornecedor.getText().equals("0")) {
                jTextFieldInfo_Fornecedor.setText("Todos");
                jTableFaturas.requestFocus();
                buscarID_FornecedorAbertoTodos();
            }
        }
    }//GEN-LAST:event_jTextFieldID_FornecedorFocusLost

    private void jButton1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1FocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JDPesquisaGlobalFornecedor dLancPagar = new JDPesquisaGlobalFornecedor(null, rootPaneCheckingEnabled);
        dLancPagar.setLocationRelativeTo(null);
        dLancPagar.setVisible(true);
        jTextFieldID_Fornecedor.setText(String.valueOf(JDPesquisaGlobalFornecedor.id_fornecedor));
        buscarSomenteID_Fornecedor();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(0);
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(100);
        if (jRadioButtonAberto.isSelected()) {
            buscarID_FornecedorAberto();
        } else if (jRadioButtonQuitado.isSelected()) {
            buscarID_FornecedorQuitado();
        } else if (jRadioButtonTodos.isSelected()) {
            buscarID_FornecedorQuitado();
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonBaixarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBaixarActionPerformed
        // TODO add your handling code here:
        int linha = jTableFaturas.getSelectedRow();
        if (jTableFaturas.getValueAt(linha, 0) == null) {
            
        } else {
            
            int option = JOptionPane.showConfirmDialog(rootPane, "Confirma ?");
            
            if (option == JOptionPane.YES_OPTION) {
                EfetuarBaixa();
            } else {
                
            }
        }
    }//GEN-LAST:event_jButtonBaixarActionPerformed

    private void jRadioButtonAbertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAbertoActionPerformed
        // TODO add your handling code here:
//        jButtonBaixar.setEnabled(true);
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(0);
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(100);
        if (jTextFieldID_Fornecedor.getText().equals("0")) {
            buscarID_FornecedorAbertoTodos();
        } else {
            buscarID_FornecedorAberto();
        }
        jButtonBaixar.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonAbertoActionPerformed

    private void jRadioButtonQuitadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonQuitadoActionPerformed
        // TODO add your handling code here:
//        jButtonBaixar.setEnabled(false);
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(0);
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(100);
        if (jTextFieldID_Fornecedor.getText().equals("0")) {
            buscarID_FornecedorQuitadoTodos();
        } else {
            buscarID_FornecedorQuitado();
        }
        jButtonBaixar.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonQuitadoActionPerformed

    private void jRadioButtonTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonTodosActionPerformed
        // TODO add your handling code here:
//        jButtonBaixar.setEnabled(false);
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(0);
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(100);
        if (jTextFieldID_Fornecedor.getText().equals("0")) {
            buscarID_FornecedorTodosTodos();
        } else {
            buscarID_FornecedorTodos();
        }
        jButtonBaixar.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonTodosActionPerformed
    
    private void buttonBuscar() {
        
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(0);
        ((DefaultTableModel) jTableFaturas.getModel()).setNumRows(100);
        if (jRadioButtonAberto.isSelected()) {
            buscarID_FornecedorAberto();
        } else if (jRadioButtonQuitado.isSelected()) {
            buscarID_FornecedorQuitado();
        } else if (jRadioButtonTodos.isSelected()) {
            buscarID_FornecedorTodos();
        }
        
    }
    
    private void EfetuarBaixa() {
        int linha = jTableFaturas.getSelectedRow();
        ContasPagarBean conta = new ContasPagarBean();
        ContasPagarDAO dao = new ContasPagarDAO();
        CaixaBean caixa = new CaixaBean();
        CaixaDAO daoc = new CaixaDAO();
        Date data_criacao = new Date();
        java.sql.Timestamp timestamp = new java.sql.Timestamp(data_criacao.getTime());
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        
        try {
            String idstr = jTableFaturas.getValueAt(linha, 0).toString();
            String tipo_movimento = "S";
            String tipo_pagamento = String.valueOf(jTableFaturas.getValueAt(linha, 4));
//            Object data_lancamento = jTableFaturas.getValueAt(linha, 4);
            String historico = jTableFaturas.getValueAt(linha, 7).toString();
            
            String valorstr = jTableFaturas.getValueAt(linha, 8).toString();
            Double valor = Double.parseDouble(valorstr);
            
            caixa.setTipo_movimento(tipo_movimento);
            caixa.setTipo_pagamento(tipo_pagamento);
            caixa.setData_lancamento(data_criacao);
            caixa.setHora_lancamento(timestamp);
            caixa.setHistorico(historico);
            caixa.setValor(valor);
            caixa.setId_titulo(Integer.parseInt(idstr));
            caixa.setCaixa("Movi Mente");
            caixa.setId_banco(1);
            caixa.setId_tipo(2);
            caixa.setId_fornecedor(Integer.parseInt(jTextFieldID_Fornecedor.getText()));
            caixa.setId_aluno(1);
            
            conta.setId_contas_pagar(Integer.parseInt(idstr));
            conta.setData_baixa(data_criacao);
            conta.setHora_baixa(timestamp);
            dao.efetuarBaixa(conta);
            daoc.inserir(caixa);
//            gerarreciboJD();
            ((DefaultTableModel) jTableFaturas.getModel()).removeRow(jTableFaturas.getSelectedRow());

//            jFormattedTextFieldCPFBusca.setText("");
//            jFormattedTextFieldCPFBusca.requestFocus();
        } catch (NumberFormatException | SQLException e) {
            
        }
    }
    
    private void iniciarBD() {
        try {
            con = ConexaoFactory.getConnection();
            stmtListar = con.createStatement();
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
        }
    }
    
    private void buscarSomenteID_Fornecedor() {
        try {
            
            jTextFieldInfo_Fornecedor.setText("");
            int id_fornecedor = JDPesquisaGlobalFornecedor.id_fornecedor;
            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT\n"
                    + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                    + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                    + "     contas_pagar.`status` AS contas_pagar_status,\n"
                    + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                    + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                    + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                    + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                    + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                    + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                    + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                    + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                    + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                    + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                    + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                    + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                    + "FROM\n"
                    + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa` WHERE id_empresa='" + id_fornecedor + "'");
            
            if (rsListar.next()) {
                
                jTextFieldInfo_Fornecedor.setText(rsListar.getString(2));
            }
        } catch (SQLException ex) {
            
        }
    }
    
    private void nome() {
        try {
            
            jTextFieldInfo_Fornecedor.setText("");
            
            if (jTextFieldID_Fornecedor.getText().isEmpty()) {
                
            } else {
                
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * from cad_empresa WHERE id_empresa='" + Integer.parseInt(jTextFieldID_Fornecedor.getText()) + "'");
                
                if (rsListar.first()) {
                    
                    jTextFieldInfo_Fornecedor.setText(rsListar.getString("nome_fantasia"));
                }
            }
        } catch (SQLException ex) {
            
        }
        
    }
    
    private void buscarSomenteID_FornecedorID() {
        try {
            
            if (jTextFieldID_Fornecedor.getText().isEmpty()) {
                
            } else {
                
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                        + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                        + "     contas_pagar.`status` AS contas_pagar_status,\n"
                        + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                        + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                        + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                        + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                        + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                        + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                        + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                        + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                        + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                        + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                        + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                        + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                        + "FROM\n"
                        + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa` WHERE id_empresa='" + Integer.parseInt(jTextFieldID_Fornecedor.getText()) + "' and status=1");
                
                if (rsListar.next()) {
                    
                    jTextFieldInfo_Fornecedor.setText(rsListar.getString("cad_empresa_nome_fantasia"));
                }
            }
        } catch (SQLException ex) {
            
        }
        
    }
    
    private void somar() {
        
        double total = 0;
        
        DefaultTableModel modelo = (DefaultTableModel) jTableFaturas.getModel();
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            double valor = Double.parseDouble(jTableFaturas.getValueAt(i, 8).toString());
            total += valor;
        }
        
        jTextFieldValorTotal.setText(String.valueOf(total));
        
    }
    
    private void buscarID_FornecedorTodos() {
        try {
            
            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT\n"
                    + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                    + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                    + "     contas_pagar.`status` AS contas_pagar_status,\n"
                    + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                    + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                    + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                    + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                    + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                    + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                    + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                    + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                    + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                    + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                    + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                    + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                    + "FROM\n"
                    + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa` WHERE id_fornecedor='" + Integer.parseInt(jTextFieldID_Fornecedor.getText()) + "'");
            montarTabela();
            
        } catch (SQLException ex) {
            
        }
    }
    
    private void buscarID_FornecedorQuitado() {
        try {
            
            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT\n"
                    + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                    + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                    + "     contas_pagar.`status` AS contas_pagar_status,\n"
                    + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                    + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                    + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                    + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                    + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                    + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                    + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                    + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                    + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                    + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                    + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                    + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                    + "FROM\n"
                    + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa` WHERE id_fornecedor='" + jTextFieldID_Fornecedor.getText() + "' and data_baixa IS NOT NULL");
            montarTabela();
            
        } catch (SQLException ex) {
            
        }
    }
    
    private void buscarID_FornecedorAberto() {
        try {
            
            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT\n"
                    + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                    + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                    + "     contas_pagar.`status` AS contas_pagar_status,\n"
                    + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                    + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                    + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                    + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                    + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                    + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                    + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                    + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                    + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                    + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                    + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                    + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                    + "FROM\n"
                    + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa` WHERE id_fornecedor='" + Integer.parseInt(jTextFieldID_Fornecedor.getText()) + "' and data_baixa IS NULL");
            montarTabela();
            
        } catch (SQLException ex) {
            
        }
    }
    
    private void buscarID_FornecedorAbertoTodos() {
        try {
            
            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT\n"
                    + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                    + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                    + "     contas_pagar.`status` AS contas_pagar_status,\n"
                    + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                    + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                    + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                    + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                    + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                    + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                    + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                    + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                    + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                    + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                    + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                    + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                    + "FROM\n"
                    + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa` WHERE data_baixa IS NULL");
            montarTabela();
            
        } catch (SQLException ex) {
            
        }
    }
    
    private void buscarID_FornecedorQuitadoTodos() {
        try {
            
            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT\n"
                    + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                    + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                    + "     contas_pagar.`status` AS contas_pagar_status,\n"
                    + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                    + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                    + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                    + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                    + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                    + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                    + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                    + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                    + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                    + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                    + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                    + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                    + "FROM\n"
                    + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa` WHERE data_baixa IS NOT NULL");
            if (!rsListar.next()) {
//                JOptionPane.showMessageDialog(null, "Nenhum resultado encontrado!!");
                jTextFieldID_Fornecedor.requestFocus();
            } else {
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                        + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                        + "     contas_pagar.`status` AS contas_pagar_status,\n"
                        + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                        + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                        + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                        + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                        + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                        + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                        + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                        + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                        + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                        + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                        + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                        + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                        + "FROM\n"
                        + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa` WHERE data_baixa IS NOT NULL");
                montarTabela();
            }
        } catch (SQLException ex) {
            
        }
    }
    
    private void buscarID_FornecedorTodosTodos() {
        try {
            
            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT\n"
                    + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                    + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                    + "     contas_pagar.`status` AS contas_pagar_status,\n"
                    + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                    + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                    + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                    + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                    + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                    + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                    + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                    + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                    + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                    + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                    + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                    + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                    + "FROM\n"
                    + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa`");
            if (!rsListar.next()) {
//                JOptionPane.showMessageDialog(null, "Nenhum resultado encontrado!!");
                jTextFieldID_Fornecedor.requestFocus();
            } else {
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     contas_pagar.`id_contas_pagar` AS contas_pagar_id_contas_pagar,\n"
                        + "     contas_pagar.`qtd_parcelas` AS contas_pagar_qtd_parcelas,\n"
                        + "     contas_pagar.`status` AS contas_pagar_status,\n"
                        + "     contas_pagar.`numero_parcela` AS contas_pagar_numero_parcela,\n"
                        + "     contas_pagar.`historico` AS contas_pagar_historico,\n"
                        + "     contas_pagar.`tipo_saida` AS contas_pagar_tipo_saida,\n"
                        + "     contas_pagar.`tipo_pagamento` AS contas_pagar_tipo_pagamento,\n"
                        + "     contas_pagar.`caixa` AS contas_pagar_caixa,\n"
                        + "     contas_pagar.`data_lancamento` AS contas_pagar_data_lancamento,\n"
                        + "     contas_pagar.`hora_lancamento` AS contas_pagar_hora_lancamento,\n"
                        + "     contas_pagar.`data_vencimento` AS contas_pagar_data_vencimento,\n"
                        + "     contas_pagar.`data_baixa` AS contas_pagar_data_baixa,\n"
                        + "     contas_pagar.`hora_baixa` AS contas_pagar_hora_baixa,\n"
                        + "     contas_pagar.`id_fornecedor` AS contas_pagar_id_fornecedor,\n"
                        + "     contas_pagar.`valor` AS contas_pagar_valor,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia\n"
                        + "FROM\n"
                        + "     `contas_pagar` contas_pagar INNER JOIN `cad_empresa` cad_empresa ON contas_pagar.`id_fornecedor` = cad_empresa.`id_empresa`");
                montarTabela();
            }
        } catch (SQLException ex) {
            
        }
    }
    
    private void montarTabela() {
        int linha = 0;
        try {
            while (rsListar.next()) {
                String id_cp = rsListar.getString("contas_pagar_id_contas_pagar");
                String parcela = rsListar.getString("contas_pagar_numero_parcela");
                String fornecedor = rsListar.getString("cad_empresa_nome_fantasia");
                String tipo_saida = rsListar.getString("contas_pagar_tipo_saida");
                String tipo_pagamento = rsListar.getString("contas_pagar_tipo_pagamento");
                Object data_lancamento = rsListar.getObject("contas_pagar_data_lancamento");
                Object data_vencimento = rsListar.getObject("contas_pagar_data_vencimento");
                String historico = rsListar.getString("contas_pagar_historico");
                Double valor = rsListar.getDouble("contas_pagar_valor");
                String status = rsListar.getString("contas_pagar_status");
                jTableFaturas.getModel().setValueAt(id_cp, linha, 0);
                jTableFaturas.getModel().setValueAt(parcela, linha, 1);
                jTableFaturas.getModel().setValueAt(fornecedor, linha, 2);
                jTableFaturas.getModel().setValueAt(tipo_saida, linha, 3);
                jTableFaturas.getModel().setValueAt(tipo_pagamento, linha, 4);
                jTableFaturas.getModel().setValueAt(data_lancamento, linha, 5);
                jTableFaturas.getModel().setValueAt(data_vencimento, linha, 6);
                jTableFaturas.getModel().setValueAt(historico, linha, 7);
                jTableFaturas.getModel().setValueAt(valor, linha, 8);
                jTableFaturas.getModel().setValueAt(status, linha, 9);
                
                if (status.equals("1")) {
                    jTableFaturas.getModel().setValueAt("Em Aberto", linha, 9);
                } else {
                    jTableFaturas.getModel().setValueAt("Baixado", linha, 9);
                }
                linha++;
                
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                    
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDBaixaPagar.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDBaixaPagar.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDBaixaPagar.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDBaixaPagar.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDBaixaPagar dialog = new JDBaixaPagar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private util.DataRender dataRender1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonBaixar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JRadioButton jRadioButtonAberto;
    private javax.swing.JRadioButton jRadioButtonQuitado;
    private javax.swing.JRadioButton jRadioButtonTodos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFaturas;
    private javax.swing.JTextField jTextFieldID_Fornecedor;
    private javax.swing.JTextField jTextFieldInfo_Fornecedor;
    private javax.swing.JTextField jTextFieldValorTotal;
    private util.PrecoRender precoRender1;
    // End of variables declaration//GEN-END:variables
}
