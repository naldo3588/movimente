/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src;

import bean.AlunoBean;
import bean.CaixaBean;
import bean.ContasPagarBean;
import bean.ContasReceberBean;
import bean.ParcelasBean;
import dao.CaixaDAO;
import dao.ParcelasDAO;
import de.javasoft.plaf.synthetica.SyntheticaPlainLookAndFeel;
import factory.ConexaoFactory;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ronaldo Pedro
 */
public class JDMovimentoCaixa extends javax.swing.JFrame {
    ConexaoFactory conecta = new ConexaoFactory();
    private java.sql.Connection con;
    private java.sql.Statement stmtListar;
    private java.sql.ResultSet rsListar;
    private java.sql.ResultSet rsListar2;
    String tipo = null;
    Toolkit toolkit = Toolkit.getDefaultToolkit();
    Dimension screenSize = toolkit.getScreenSize();
    NumberFormat format;
    public String sql;

    /**
     * Creates new form JDMovimentoCaixa
     */
    public JDMovimentoCaixa(java.awt.Frame parent, boolean modal) {
//        super(parent, modal);
        initComponents();
        lookandfell();
        this.setLocationRelativeTo(null);
        this.setBounds(0, 580, screenSize.width, 580);
        jDateChooserA02.setVisible(false);
        jDateChooserDe01.setVisible(false);
        jLabelA.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jComboBoxPeriodo = new javax.swing.JComboBox<>();
        jDateChooserDe01 = new com.toedter.calendar.JDateChooser();
        jLabelA = new javax.swing.JLabel();
        jDateChooserA02 = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jRadioButtonEntrada = new javax.swing.JRadioButton();
        jRadioButtonSaida = new javax.swing.JRadioButton();
        jRadioButtonTodos = new javax.swing.JRadioButton();
        jButtonBuscar = new javax.swing.JButton();
        jButtonGerarRelatorio = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jTextFieldNome = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextFieldTotalSaldo = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCaixa = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldValorTotal = new javax.swing.JTextField();
        jButtonEstornoTitulo = new javax.swing.JButton();
        dataRender1 = new util.DataRender();
        precoRender1 = new util.PrecoRender();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Movi Mente - Movimento Caixa");
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Movimentação Caixa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Periodo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBoxPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Hoje", "Entre Datas", "Ultimos 7 Dias", "Ultimos 30 Dias" }));
        jComboBoxPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPeriodoItemStateChanged(evt);
            }
        });
        jPanel3.add(jComboBoxPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 81, 300, -1));
        jPanel3.add(jDateChooserDe01, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 119, -1, -1));

        jLabelA.setText("a");
        jPanel3.add(jLabelA, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 14, -1));
        jPanel3.add(jDateChooserA02, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tipo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        buttonGroup1.add(jRadioButtonEntrada);
        jRadioButtonEntrada.setText("Entrada");
        jRadioButtonEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonEntradaActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonSaida);
        jRadioButtonSaida.setText("Saida");
        jRadioButtonSaida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSaidaActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonTodos);
        jRadioButtonTodos.setText("Todos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jRadioButtonEntrada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jRadioButtonSaida)
                .addGap(49, 49, 49)
                .addComponent(jRadioButtonTodos)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jRadioButtonEntrada)
                .addComponent(jRadioButtonSaida)
                .addComponent(jRadioButtonTodos))
        );

        jPanel3.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 17, 300, -1));

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonGerarRelatorio.setText("Gerar Extrato");
        jButtonGerarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGerarRelatorioActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Aluno / Empresa ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jTextFieldNome.setEditable(false);

        jButton1.setText("A");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("F");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("ID");

        jTextFieldId.setEditable(false);
        jTextFieldId.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextFieldId.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton4.setText("Limpar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextFieldNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton1))
                        .addGap(8, 8, 8))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        jLabel2.setText("Saldo Total Caixa");

        jFormattedTextFieldTotalSaldo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
        jFormattedTextFieldTotalSaldo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jFormattedTextFieldTotalSaldo.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addComponent(jButtonGerarRelatorio))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jFormattedTextFieldTotalSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextFieldTotalSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonBuscar)
                            .addComponent(jButtonGerarRelatorio)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTableCaixa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nº Titulo", "Data Lançamento", "Hora Lançamento", "Tipo Saldo", "Tipo Pagamento", "Historico", "Caixa", "Valor", "Nº Banco", "Tipo", "Pessoa", "Empresa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCaixa.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableCaixa.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableCaixa);
        if (jTableCaixa.getColumnModel().getColumnCount() > 0) {
            jTableCaixa.getColumnModel().getColumn(0).setMinWidth(60);
            jTableCaixa.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTableCaixa.getColumnModel().getColumn(0).setMaxWidth(60);
            jTableCaixa.getColumnModel().getColumn(1).setMinWidth(100);
            jTableCaixa.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTableCaixa.getColumnModel().getColumn(1).setMaxWidth(100);
            jTableCaixa.getColumnModel().getColumn(1).setCellRenderer(dataRender1);
            jTableCaixa.getColumnModel().getColumn(2).setMinWidth(100);
            jTableCaixa.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTableCaixa.getColumnModel().getColumn(2).setMaxWidth(100);
            jTableCaixa.getColumnModel().getColumn(3).setMinWidth(65);
            jTableCaixa.getColumnModel().getColumn(3).setPreferredWidth(65);
            jTableCaixa.getColumnModel().getColumn(3).setMaxWidth(65);
            jTableCaixa.getColumnModel().getColumn(4).setMinWidth(125);
            jTableCaixa.getColumnModel().getColumn(4).setPreferredWidth(125);
            jTableCaixa.getColumnModel().getColumn(4).setMaxWidth(125);
            jTableCaixa.getColumnModel().getColumn(6).setMinWidth(100);
            jTableCaixa.getColumnModel().getColumn(6).setPreferredWidth(100);
            jTableCaixa.getColumnModel().getColumn(6).setMaxWidth(100);
            jTableCaixa.getColumnModel().getColumn(7).setMinWidth(100);
            jTableCaixa.getColumnModel().getColumn(7).setPreferredWidth(100);
            jTableCaixa.getColumnModel().getColumn(7).setMaxWidth(100);
            jTableCaixa.getColumnModel().getColumn(7).setCellRenderer(precoRender1);
            jTableCaixa.getColumnModel().getColumn(8).setMinWidth(0);
            jTableCaixa.getColumnModel().getColumn(8).setPreferredWidth(0);
            jTableCaixa.getColumnModel().getColumn(8).setMaxWidth(0);
            jTableCaixa.getColumnModel().getColumn(9).setMinWidth(100);
            jTableCaixa.getColumnModel().getColumn(9).setPreferredWidth(100);
            jTableCaixa.getColumnModel().getColumn(9).setMaxWidth(100);
        }

        jButton2.setText("Sair");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Total");

        jTextFieldValorTotal.setEditable(false);

        jButtonEstornoTitulo.setText("Estornar Titulo");
        jButtonEstornoTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEstornoTituloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton2)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonEstornoTitulo)
                        .addGap(154, 154, 154)
                        .addComponent(dataRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(precoRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEstornoTitulo)
                    .addComponent(dataRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(precoRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Selecione")) {
            JOptionPane.showMessageDialog(rootPane, "Selecione o Periodo !!");

        } else {

            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jDateChooserDe01.getDate() == null && jDateChooserA02.getDate() == null) {

                JOptionPane.showMessageDialog(rootPane, "Preencha as Datas !!");
            } else {

                ((DefaultTableModel) jTableCaixa.getModel()).setNumRows(0);
                ((DefaultTableModel) jTableCaixa.getModel()).setNumRows(100);

                buscarDadosEmpresas();
//                somarTotal();
            }
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jComboBoxPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPeriodoItemStateChanged
        // TODO add your handling code here:

        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas")) {
            jDateChooserA02.setVisible(true);
            jDateChooserDe01.setVisible(true);
            jLabelA.setVisible(true);
        } else {
            jDateChooserA02.setVisible(false);
            jDateChooserDe01.setVisible(false);
            jLabelA.setVisible(false);
        }

    }//GEN-LAST:event_jComboBoxPeriodoItemStateChanged

    private void jButtonEstornoTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEstornoTituloActionPerformed
        // TODO add your handling code here:

        int linha = jTableCaixa.getSelectedRow();
        if (jTableCaixa.getValueAt(linha, 0) == null) {
            JOptionPane.showMessageDialog(null, "Selecione uma Linha !!");
        } else {

            try {

                CaixaBean caixa = new CaixaBean();
                CaixaDAO dao = new CaixaDAO();
                ParcelasBean parcela = new ParcelasBean();
                ContasPagarBean pagar = new ContasPagarBean();
                ContasReceberBean receber = new ContasReceberBean();
                ParcelasDAO daop = new ParcelasDAO();

                String idstr = jTableCaixa.getValueAt(linha, 0).toString();

                caixa.setId_titulo(Integer.parseInt(idstr));
                parcela.setId_parcela_contrato(Integer.parseInt(idstr));
                pagar.setId_contas_pagar(Integer.parseInt(idstr));
                receber.setId_contas_receber(Integer.parseInt(idstr));

                Integer opcao = JOptionPane.showConfirmDialog(null, "Confirma o Estorno do Titutlo?", "Estornar Titulo", JOptionPane.OK_CANCEL_OPTION);
                if (opcao == JOptionPane.YES_OPTION) {
                    dao.estornarBaixa(caixa);
                    if (jTableCaixa.getValueAt(linha, 9).equals("Contrato")) {
                        daop.efetuarEstornoContrato(parcela);
                    } else if (jTableCaixa.getValueAt(linha, 9).equals("Contas a Pagar")) {
                        daop.efetuarEstornoContasaPagar(pagar);
                    } else if (jTableCaixa.getValueAt(linha, 9).equals("Contas a Receber")) {
                        daop.efetuarEstornoContasaReceber(receber);
                    } else  if (jTableCaixa.getValueAt(linha, 9).equals("Contrato Empresa")) {
                        daop.efetuarEstornoContratoEmpresa(parcela);
                    }

                    ((DefaultTableModel) jTableCaixa.getModel()).removeRow(jTableCaixa.getSelectedRow());
                    buscarSaldo();
                } else {

                }
            } catch (ClassNotFoundException | NumberFormatException | SQLException e) {

            }
        }

    }//GEN-LAST:event_jButtonEstornoTituloActionPerformed

    private void jButtonGerarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGerarRelatorioActionPerformed
        // TODO add your handling code here:
        buscarDadosEmpresasGerar();
    }//GEN-LAST:event_jButtonGerarRelatorioActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        buscarSaldo();
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JDPesquisaGlobalAluno pesquisa = new JDPesquisaGlobalAluno(null, rootPaneCheckingEnabled);
        pesquisa.setLocationRelativeTo(null);
        pesquisa.setVisible(true);
        int id_titular = JDPesquisaGlobalAluno.id_titular;
        jTextFieldId.setText(String.valueOf(id_titular));
        buscarNomeAluno();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JDPesquisaGlobalFornecedor pesquisa = new JDPesquisaGlobalFornecedor(null, rootPaneCheckingEnabled);
        pesquisa.setLocationRelativeTo(null);
        pesquisa.setVisible(true);
        int id_titular = JDPesquisaGlobalFornecedor.id_fornecedor;
        jTextFieldId.setText(String.valueOf(id_titular));
        buscarNomeEmpresa();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jRadioButtonEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonEntradaActionPerformed

    private void jRadioButtonSaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSaidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonSaidaActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        jTextFieldNome.setText("");
        jTextFieldId.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void iniciarBD() {
        try {
            con = ConexaoFactory.getConnection();
            stmtListar = con.createStatement();

        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
        }
    }

    private void buscarDadosEmpresas() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        try {
            if (jRadioButtonEntrada.isSelected()) {
                tipo = "E";
            } else if (jRadioButtonSaida.isSelected()) {
                tipo = "S";
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento=CURRENT_DATE");
                montarTabela();

            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && jRadioButtonTodos.isSelected() && jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && jRadioButtonTodos.isSelected() && jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && jRadioButtonTodos.isSelected() && jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` WHERE caixa.data_lancamento=CURRENT_DATE order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jTextFieldId.getText().isEmpty()) {
                Date dataDe01 = jDateChooserDe01.getDate();
                Date dataA02 = jDateChooserA02.getDate();

                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' and caixa.tipo_movimento='" + tipo + "'");
                montarTabela();

            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jRadioButtonTodos.isSelected() && jTextFieldId.getText().isEmpty()) {
                Date dataDe01 = jDateChooserDe01.getDate();
                Date dataA02 = jDateChooserA02.getDate();

                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' order by caixa.id_caixa DESC");
                montarTabela();

            }

            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && !jTextFieldId.getText().isEmpty()) {

                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento=CURRENT_DATE and caixa.id_fornecedor=" + Integer.parseInt(jTextFieldId.getText()) + "");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && !jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && !jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && !jTextFieldId.getText().isEmpty()) {
                Date dataDe01 = jDateChooserDe01.getDate();
                Date dataA02 = jDateChooserA02.getDate();

                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' and caixa.tipo_movimento='" + tipo + "' and caixa.id_fornecedor='" + jTextFieldId.getText() + "'");
                montarTabela();

            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
                Date dataDe01 = jDateChooserDe01.getDate();
                Date dataA02 = jDateChooserA02.getDate();

                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT\n"
                        + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                        + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                        + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                        + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                        + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                        + "     caixa.`historico` AS caixa_historico,\n"
                        + "     caixa.`valor` AS caixa_valor,\n"
                        + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                        + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                        + "     caixa.`id_banco` AS caixa_id_banco,\n"
                        + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                        + "     caixa.`tipo` AS caixa_tipo,\n"
                        + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                        + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                        + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                        + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                        + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                        + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                        + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                        + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                        + "FROM\n"
                        + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                        + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
                montarTabela();

            }
        } catch (SQLException ex) {

        }
    }
    
    private void buscarDadosEmpresasGerar() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        if (jRadioButtonEntrada.isSelected()) {
            tipo = "E";
        } else if (jRadioButtonSaida.isSelected()) {
            tipo = "S";
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento=CURRENT_DATE");
            
            gerarextratoJD();
            
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && jRadioButtonTodos.isSelected() && jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && jRadioButtonTodos.isSelected() && jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && jRadioButtonTodos.isSelected() && jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jTextFieldId.getText().isEmpty()) {
            Date dataDe01 = jDateChooserDe01.getDate();
            Date dataA02 = jDateChooserA02.getDate();
            
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' and caixa.tipo_movimento='" + tipo + "'");
            gerarextratoJD();
            
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jRadioButtonTodos.isSelected() && jTextFieldId.getText().isEmpty()) {
            Date dataDe01 = jDateChooserDe01.getDate();
            Date dataA02 = jDateChooserA02.getDate();
            
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' order by caixa.id_caixa DESC");
            gerarextratoJD();
            
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && !jTextFieldId.getText().isEmpty()) {
            
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento=CURRENT_DATE and caixa.id_fornecedor=" + Integer.parseInt(jTextFieldId.getText()) + "");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && !jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && !jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.tipo_movimento='" + tipo + "' and caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
            gerarextratoJD();
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && !jTextFieldId.getText().isEmpty()) {
            Date dataDe01 = jDateChooserDe01.getDate();
            Date dataA02 = jDateChooserA02.getDate();
            
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' and caixa.tipo_movimento='" + tipo + "' and caixa.id_fornecedor='" + jTextFieldId.getText() + "'");
            gerarextratoJD();
            
        }
        if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
            Date dataDe01 = jDateChooserDe01.getDate();
            Date dataA02 = jDateChooserA02.getDate();
            
            iniciarBD();
            sql = ("SELECT\n"
                    + "     caixa.`id_caixa` AS caixa_id_caixa,\n"
                    + "     caixa.`tipo_movimento` AS caixa_tipo_movimento,\n"
                    + "     caixa.`tipo_pagamento` AS caixa_tipo_pagamento,\n"
                    + "     caixa.`data_lancamento` AS caixa_data_lancamento,\n"
                    + "     caixa.`hora_lancamento` AS caixa_hora_lancamento,\n"
                    + "     caixa.`historico` AS caixa_historico,\n"
                    + "     caixa.`valor` AS caixa_valor,\n"
                    + "     caixa.`id_titulo` AS caixa_id_titulo,\n"
                    + "     caixa.`nome_caixa` AS caixa_nome_caixa,\n"
                    + "     caixa.`id_banco` AS caixa_id_banco,\n"
                    + "     caixa.`id_fornecedor` AS caixa_id_fornecedor,\n"
                    + "     caixa.`tipo` AS caixa_tipo,\n"
                    + "     cad_empresa.`id_empresa` AS cad_empresa_id_empresa,\n"
                    + "     cad_empresa.`nome_fantasia` AS cad_empresa_nome_fantasia,\n"
                    + "     cad_empresa.`razao_social` AS cad_empresa_razao_social,\n"
                    + "     caixa.`id_aluno` AS caixa_id_aluno,\n"
                    + "     cad_aluno.`id_aluno` AS cad_aluno_id_aluno,\n"
                    + "     cad_aluno.`nome` AS cad_aluno_nome,\n"
                    + "     cad_aluno.`ativo` AS cad_aluno_ativo,\n"
                    + "     cad_aluno.`id_titular` AS cad_aluno_id_titular\n"
                    + "FROM\n"
                    + "     `caixa` caixa INNER JOIN `cad_empresa` cad_empresa ON caixa.`id_fornecedor` = cad_empresa.`id_empresa`\n"
                    + "     INNER JOIN `cad_aluno` cad_aluno ON caixa.`id_aluno` = cad_aluno.`id_aluno` where caixa.data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' and caixa.id_fornecedor='" + jTextFieldId.getText() + "' order by caixa.id_caixa DESC");
            gerarextratoJD();
            
        }
    }

    private void buscarDadosAlunos() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        try {
            if (jRadioButtonEntrada.isSelected()) {
                tipo = "E";
            } else if (jRadioButtonSaida.isSelected()) {
                tipo = "S";
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje")) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where tipo_movimento='" + tipo + "' and data_lancamento=CURRENT_DATE");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias")) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where tipo_movimento='" + tipo + "' and data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() order by id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && jRadioButtonTodos.isSelected()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() order by id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias")) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where tipo_movimento='" + tipo + "' and data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() order by id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && jRadioButtonTodos.isSelected()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() order by id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && jRadioButtonTodos.isSelected()) {
                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * FROM caixa order by id_caixa DESC");
                montarTabela();
            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas")) {
                Date dataDe01 = jDateChooserDe01.getDate();
                Date dataA02 = jDateChooserA02.getDate();

                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' and tipo_movimento='" + tipo + "'");
                montarTabela();

            }
            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jRadioButtonTodos.isSelected()) {
                Date dataDe01 = jDateChooserDe01.getDate();
                Date dataA02 = jDateChooserA02.getDate();

                iniciarBD();
                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' order by id_caixa DESC");
                montarTabela();

            }

            ////////////////////////////
//            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && !jTextFieldId.getText().isEmpty()) {
//                iniciarBD();
//                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where tipo_movimento='" + tipo + "' and data_lancamento=CURRENT_DATE and ");
//                montarTabela();
//            }
//            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && !jTextFieldId.getText().isEmpty()) {
//                iniciarBD();
//                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where tipo_movimento='" + tipo + "' and data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() order by id_caixa DESC");
//                montarTabela();
//            }
//            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 7 Dias") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
//                iniciarBD();
//                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW() order by id_caixa DESC");
//                montarTabela();
//            }
//            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && !jTextFieldId.getText().isEmpty()) {
//                iniciarBD();
//                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where tipo_movimento='" + tipo + "' and data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() order by id_caixa DESC");
//                montarTabela();
//            }
//            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Ultimos 30 Dias") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
//                iniciarBD();
//                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where data_lancamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 30 day)) AND NOW() order by id_caixa DESC");
//                montarTabela();
//            }
//            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Hoje") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
//                iniciarBD();
//                rsListar = stmtListar.executeQuery("SELECT * FROM caixa order by id_caixa DESC");
//                montarTabela();
//            }
//            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && !jTextFieldId.getText().isEmpty()) {
//                Date dataDe01 = jDateChooserDe01.getDate();
//                Date dataA02 = jDateChooserA02.getDate();
//
//                iniciarBD();
//                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' and tipo_movimento='" + tipo + "'");
//                montarTabela();
//
//            }
//            if (jComboBoxPeriodo.getSelectedItem().toString().equals("Entre Datas") && jRadioButtonTodos.isSelected() && !jTextFieldId.getText().isEmpty()) {
//                Date dataDe01 = jDateChooserDe01.getDate();
//                Date dataA02 = jDateChooserA02.getDate();
//
//                iniciarBD();
//                rsListar = stmtListar.executeQuery("SELECT * FROM caixa where data_lancamento between '" + df.format(dataDe01) + "' and '" + df.format(dataA02) + "' order by id_caixa DESC");
//                montarTabela();
//
//            }
        } catch (SQLException ex) {

        }
    }
    
    private void gerarextratoJD() {
        try {

            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Dimension screenSize = toolkit.getScreenSize();

            JDialog viewer = new JDialog(new javax.swing.JFrame(), "Visualização do Extrato", true);

            viewer.setBounds(0, 0, screenSize.width, screenSize.height);
            viewer.setLocationRelativeTo(null);
            conecta.executaSQL(sql);
            JRResultSetDataSource relatResult = new JRResultSetDataSource(conecta.rs);
            JasperPrint jpPrint = JasperFillManager.fillReport("C:\\Program Files\\Movimente\\MoviMente\\src\\relatorios\\extrato_caixa.jasper", new HashMap(), relatResult);
            JasperViewer jv = new JasperViewer(jpPrint, false);
            viewer.getContentPane().add(jv.getContentPane());
            viewer.setVisible(true);

        } catch (JRException e) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatorio! \nErro:" + e);
        }
    }

    private void buscarSaldo() {
        try {

            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT SUM(valor) AS total FROM caixa");

            format = NumberFormat.getCurrencyInstance();
            format.setMinimumFractionDigits(2);
            if (rsListar.first()) {
                double total = rsListar.getDouble("total");

                jFormattedTextFieldTotalSaldo.setText(String.valueOf(format.format(total)));

            }

        } catch (SQLException e) {
        }
    }

    private void buscarNomeAluno() {
        try {

            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT * from cad_aluno where id_aluno= '" + jTextFieldId.getText() + "'");

            format = NumberFormat.getCurrencyInstance();
            format.setMinimumFractionDigits(2);
            if (rsListar.first()) {
                String nome = rsListar.getString("nome");

                jTextFieldNome.setText(nome);
            }
//                rsListar2 = stmtListar.executeQuery("SELECT *,SUM(valor) as total FROM caixa where tipo_movimento='" + tipo + "' and data_lancamento=CURRENT_DATE");

        } catch (SQLException e) {
        }
    }

    private void buscarNomeEmpresa() {
        try {

            iniciarBD();
            rsListar = stmtListar.executeQuery("SELECT * from cad_empresa where id_empresa= '" + jTextFieldId.getText() + "'");

            format = NumberFormat.getCurrencyInstance();
            format.setMinimumFractionDigits(2);
            if (rsListar.first()) {
                String nome = rsListar.getString("nome_fantasia");

                jTextFieldNome.setText(nome);
            }
//                rsListar2 = stmtListar.executeQuery("SELECT *,SUM(valor) as total FROM caixa where tipo_movimento='" + tipo + "' and data_lancamento=CURRENT_DATE");

        } catch (SQLException e) {
        }
    }

    private void montarTabela() {
        int linha = 0;
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        try {
            while (rsListar.next()) {
                String numero_titulo = rsListar.getString("caixa_id_titulo");
                Date data_lancamento = rsListar.getDate("caixa_data_lancamento");
                String hora_lancamento = rsListar.getString("caixa_hora_lancamento");
                String tipo_movimento = rsListar.getString("caixa_tipo_movimento");
                String tipo_pagamento = rsListar.getString("caixa_tipo_pagamento");
                String historico = rsListar.getString("caixa_historico");
                Double valor = rsListar.getDouble("caixa_valor");
                String caixa = rsListar.getString("caixa_nome_caixa");
                String nomea = rsListar.getString("cad_aluno_nome");
                String nomee = rsListar.getString("cad_empresa_nome_fantasia");
                int id_banco = rsListar.getInt("caixa_id_banco");
                int tipo1 = rsListar.getInt("caixa_tipo");
//                Double total = rsListar2.getDouble("total");

                jTableCaixa.getModel().setValueAt(numero_titulo, linha, 0);
                jTableCaixa.getModel().setValueAt(data_lancamento, linha, 1);
                jTableCaixa.getModel().setValueAt(hora_lancamento, linha, 2);
                jTableCaixa.getModel().setValueAt(tipo_movimento, linha, 3);
                jTableCaixa.getModel().setValueAt(tipo_pagamento, linha, 4);
                jTableCaixa.getModel().setValueAt(historico, linha, 5);
                jTableCaixa.getModel().setValueAt(caixa, linha, 6);
                jTableCaixa.getModel().setValueAt(valor, linha, 7);
                jTableCaixa.getModel().setValueAt(id_banco, linha, 8);
                jTableCaixa.getModel().setValueAt(id_banco, linha, 9);
                jTableCaixa.getModel().setValueAt(nomea, linha, 10);
                jTableCaixa.getModel().setValueAt(nomee, linha, 11);
//                jTextFieldValorTotal.setText(String.valueOf(total));

                switch (tipo1) {
                    case 1:
                        jTableCaixa.getModel().setValueAt("Contrato Aluno", linha, 9);
                        break;
                    case 2:
                        jTableCaixa.getModel().setValueAt("Contas a Pagar", linha, 9);
                        break;
                    case 3:
                        jTableCaixa.getModel().setValueAt("Contas a Receber", linha, 9);
                        break;
                    case 4:
                        jTableCaixa.getModel().setValueAt("Contrato Empresa", linha, 9);
                        break;
                    default:
                        break;
                }
                if (jTableCaixa.getValueAt(linha, 9).equals("Contrato")) {
                    jTableCaixa.getModel().setValueAt("", linha, 11);
                }
                if (!jTableCaixa.getValueAt(linha, 9).equals("Contrato")) {
                    jTableCaixa.getModel().setValueAt("", linha, 10);
                }
                linha++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
        }
    }

    private void somarTotal() {
        double soma = 0;
        for (int i = 0; i < jTableCaixa.getRowCount(); i++) {
            Double valor = (Double) jTableCaixa.getValueAt(i, 6);
            soma += valor;
        }
        jTextFieldValorTotal.setText(String.valueOf(soma));
    }

    private void lookandfell() {
        try {

            UIManager.setLookAndFeel(new SyntheticaPlainLookAndFeel());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ParseException | UnsupportedLookAndFeelException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao alterar o tema = " + erro);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDMovimentoCaixa.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDMovimentoCaixa.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDMovimentoCaixa.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDMovimentoCaixa.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDMovimentoCaixa dialog = new JDMovimentoCaixa(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private util.DataRender dataRender1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonEstornoTitulo;
    private javax.swing.JButton jButtonGerarRelatorio;
    private javax.swing.JComboBox<String> jComboBoxPeriodo;
    private com.toedter.calendar.JDateChooser jDateChooserA02;
    private com.toedter.calendar.JDateChooser jDateChooserDe01;
    private javax.swing.JFormattedTextField jFormattedTextFieldTotalSaldo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelA;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButtonEntrada;
    private javax.swing.JRadioButton jRadioButtonSaida;
    private javax.swing.JRadioButton jRadioButtonTodos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCaixa;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JTextField jTextFieldValorTotal;
    private util.PrecoRender precoRender1;
    // End of variables declaration//GEN-END:variables
}
